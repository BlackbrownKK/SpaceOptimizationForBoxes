// The complete MenuDemo program.

package org.example.menu;

import org.example.actionListeners.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class MenuRunApp extends JPanel implements ActionListener {

    JLabel jlab;
    JMenuBar jmb;
    JToolBar jtb;
    JPopupMenu jpu;
    DebugAction setAct;
    DebugAction clearAct;
    DebugAction resumeAct;

    final String iconPath = "src/main/java/swing/menu\\";

    public MenuRunApp() {


        // Use default border layout.
        setLayout(new BorderLayout());

        // Create a new JFrame container.
        JFrame jfrm = new JFrame("PreViewer");

        // Give the frame an initial size.
        jfrm.setSize(800, 600);

        // Terminate the program when the user closes the application.
        jfrm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Create a label that will display the menu selection.
        jlab = new JLabel();

        // Create the menu bar.
        jmb = new JMenuBar();

        // Make the File menu.
        makeFileMenu();

        // Make the Vessel menu.
        makeVesselMenu();


        // Construct the Debug actions.
        makeActions();

        // Make the toolbar.
        makeToolBar();

        // Make the Options menu.
        makeOptionsMenu();

        // Make the Help menu.
        makeHelpMenu();


        // Add a listener for the popup trigger.
        jfrm.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    jpu.show(e.getComponent(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    jpu.show(e.getComponent(), e.getX(), e.getY());
                }
            }

        });

        // Add the label to the center of the content pane.
        add(jlab, BorderLayout.CENTER);

        // Add the menu bar to the frame.
        jfrm.setJMenuBar(jmb);

        // Add the toolbar to the north position of the content pane.
        add(jtb, BorderLayout.NORTH);

        // Display the frame.
        jfrm.setVisible(true);
    }

    // Handle menu item action events. обработать события действия от пунктов меню
    // This does NOT handle events generated by the Debug options.
    // Handle menu item action events.
    @Override
    public void actionPerformed(ActionEvent e) {
        // Get the action command from the menu selection.
        String comStr = e.getActionCommand();

        // If user chooses Exit, then exit the program.
        if (comStr.equals("Exit")) System.exit(0);

        // Otherwise, display the selection.
        jlab.setText(comStr + " Selected");
    }


    // A class to create an action for the Debug menu and toolbar.
    class DebugAction extends AbstractAction {

        public DebugAction(String name, Icon image, int mnem, int accel, String tTip) {
            super(name, image);
            putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(accel, InputEvent.CTRL_DOWN_MASK));
            putValue(MNEMONIC_KEY, mnem);
            putValue(SHORT_DESCRIPTION, tTip);
        }

        // Handle events for both the toolbar and the Debug menu.
        @Override
        public void actionPerformed(ActionEvent e) {
            String comStr = e.getActionCommand();

            jlab.setText(comStr + " Selected");

            // Toggle the enabled status of the Set and Clear Breakpoints options.
            if (comStr.equals("Set Breakpoint")) {
                clearAct.setEnabled(true);
                setAct.setEnabled(false);
            } else if (comStr.equals("Clear Breakpoint")) {
                clearAct.setEnabled(false);
                setAct.setEnabled(true);
            }
        }
    }

    // Create the File menu with mnemonics and accelerators.
    void makeFileMenu() {

        JMenu jmFile = new JMenu("File");
        jmFile.setMnemonic(KeyEvent.VK_F); // typing ALT-F to select File menu

        JMenuItem jmiStart = new JMenuItem("Start", KeyEvent.VK_O);
        jmiStart.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, InputEvent.CTRL_DOWN_MASK));
        jmiStart.addActionListener(new StartAction());

        JMenuItem jmiClose = new JMenuItem("Reset", KeyEvent.VK_C);
        jmiClose.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_DOWN_MASK));

        JMenuItem jmiSave = new JMenuItem("Print", KeyEvent.VK_S);
        jmiSave.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_DOWN_MASK));

        JMenuItem jmiExit = new JMenuItem("Exit", KeyEvent.VK_E);
        jmiExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, InputEvent.CTRL_DOWN_MASK));

        jmFile.add(jmiStart);
        jmFile.add(jmiClose);
        jmFile.add(jmiSave);
        jmFile.addSeparator();
        jmFile.add(jmiExit);
        jmb.add(jmFile);

        // Add the action listeners for the File menu.
        jmiStart.addActionListener(this);
        jmiClose.addActionListener(this);
        jmiSave.addActionListener(this);
        jmiExit.addActionListener(this);
    }

    // Create the Vessel menu.
    void makeVesselMenu() {
        JMenu jmVessel = new JMenu("Vessels");

        // Create menu items for each variant.
        JMenuItem Mittelplate = new JMenuItem("Mittelplate");
        JMenuItem Monika = new JMenuItem("Monika");
        JMenuItem Anna = new JMenuItem("Anna");
        JMenuItem Lagos = new JMenuItem("Lagos");
        JMenuItem London = new JMenuItem("London");
        JMenuItem Bergen = new JMenuItem("Bergen");
        JMenuItem Mila = new JMenuItem("Mila");
        JMenuItem Titan = new JMenuItem("Titan");

        // Add menu items to the Vessel menu.
        jmVessel.add(Mittelplate);
        jmVessel.add(Monika);
        jmVessel.add(Anna);
        jmVessel.add(Lagos);
        jmVessel.add(London);
        jmVessel.add(Bergen);
        jmVessel.add(Mila);
        jmVessel.add(Titan);


        Mittelplate.addActionListener(new MittelplateVesselAction());
        Monika.addActionListener(new MonikaVesselAction());
        Anna.addActionListener(new AnnaVesselAction());
        Lagos.addActionListener(new LagosVesselAction());
        London.addActionListener(new LondonVesselAction());
        Bergen.addActionListener(new BergenVesselAction());
        Mila.addActionListener(new MilaVesselAction());
        Titan.addActionListener(new TitanVesselAction());

        // Add action listeners for each menu item if needed.

        // Add the Vessel menu to the menu bar.
        jmb.add(jmVessel);


    }

    // Create the Options menu.
    void makeOptionsMenu() {

        JMenu jmOptions = new JMenu("Options");

        // Create the Colors submenu.
        JMenu jmColors = new JMenu("Colors");

        // Use check boxes for colors. This allows the user to select more than one color.
        JCheckBoxMenuItem jmiRed = new JCheckBoxMenuItem("Red");
        JCheckBoxMenuItem jmiGreen = new JCheckBoxMenuItem("Green");
        JCheckBoxMenuItem jmiBlue = new JCheckBoxMenuItem("Blue");

        jmColors.add(jmiRed);
        jmColors.add(jmiGreen);
        jmColors.add(jmiBlue);
        jmOptions.add(jmColors);

        // Create the Priority submenu.
        JMenu jmPriority = new JMenu("Priority");

        // Use radio buttons for the priority setting. This lets the menu show which priority is
        // used but also ensures that one and only one priority can be selected at any one time.
        // Notice that the High radio button is initially selected.
        JRadioButtonMenuItem jmiHigh = new JRadioButtonMenuItem("High", true);
        JRadioButtonMenuItem jmiLow = new JRadioButtonMenuItem("Low");

        jmPriority.add(jmiHigh);
        jmPriority.add(jmiLow);
        jmOptions.add(jmPriority);

        // Create button group for the radio button menu items.
        ButtonGroup bg = new ButtonGroup();
        bg.add(jmiHigh);
        bg.add(jmiLow);

        // Now, create a Debug submenu that goes under the Options menu bar item.
        // Use actions to create the items.
        JMenu jmDebug = new JMenu("Debug");
        JMenuItem jmiSetBP = new JMenuItem(setAct);
        JMenuItem jmiClearBP = new JMenuItem(clearAct);
        JMenuItem jmiResume = new JMenuItem(resumeAct);

        // Add the items to the Debug menu.
        jmDebug.add(jmiSetBP);
        jmDebug.add(jmiClearBP);
        jmDebug.add(jmiResume);
        jmOptions.add(jmDebug);

        // Create the Reset menu item.
        JMenuItem jmiReset = new JMenuItem("Reset");
        jmOptions.addSeparator();
        jmOptions.add(jmiReset);

        // Finally, add the entire options menu to the menu bar.
        jmb.add(jmOptions);

        // Add the action listeners for the Options menu, except for those supported by the Debug menu.
        jmiRed.addActionListener(this);
        jmiGreen.addActionListener(this);
        jmiBlue.addActionListener(this);
        jmiHigh.addActionListener(this);
        jmiLow.addActionListener(this);
        jmiReset.addActionListener(this);
    }

    // Create the Help menu.
    void makeHelpMenu() {
        JMenu jmHelp = new JMenu("Help");

        // Add an icon to the About menu item.
        ImageIcon icon = new ImageIcon(iconPath + "AboutIcon.png");

        JMenuItem jmiAbout = new JMenuItem("About", icon);
        jmiAbout.setToolTipText("Info about the MenuDemo program.");
        jmHelp.add(jmiAbout);
        jmb.add(jmHelp);

        // Add action listener for About.
        jmiAbout.addActionListener(this);
    }

    // Construct the actions needed by the Debug menu and toolbar.
    void makeActions() {
        // Load the images for the actions.
        ImageIcon setIcon = new ImageIcon(iconPath + "setBP.png");
        ImageIcon clearIcon = new ImageIcon(iconPath + "clearBP.png");
        ImageIcon resumeIcon = new ImageIcon(iconPath + "resume.png");

        // Create actions.
        setAct = new DebugAction("Set Breakpoint", setIcon, KeyEvent.VK_S, KeyEvent.VK_B, "Set a break point.");
        clearAct = new DebugAction("Clear Breakpoint", clearIcon, KeyEvent.VK_C, KeyEvent.VK_L, "Clear a break point.");
        resumeAct = new DebugAction("Resume", resumeIcon, KeyEvent.VK_R, KeyEvent.VK_R, "Resume execution after breakpoint.");

        // Initially disable the Clear Breakpoint option.
        clearAct.setEnabled(false);
    }

    // Create the Debug toolbar.
    void makeToolBar() {

        // Create the toolbar buttons by using the actions.
        JButton jbtnSet = new JButton(setAct);
        JButton jbtnClear = new JButton(clearAct);
        JButton jbtnResume = new JButton(resumeAct);

        // Create a Debug toolbar.
        jtb = new JToolBar("Debug");

        // Add the buttons to the toolbar.
        jtb.add(jbtnSet);
        jtb.add(jbtnClear);
        jtb.add(jbtnResume);
    }


}
